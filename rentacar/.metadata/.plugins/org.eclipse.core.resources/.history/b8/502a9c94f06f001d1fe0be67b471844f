package com.kodlamaio.invonteryServer.business.concretes;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import com.kodlamaio.common.utilities.mapping.ModelMapperService;
import com.kodlamaio.invonteryServer.business.abstracts.ModelService;
import com.kodlamaio.invonteryServer.business.request.create.CreateModelRequest;
import com.kodlamaio.invonteryServer.business.request.update.UpdateModelRequest;
import com.kodlamaio.invonteryServer.business.responses.cretae.CreateModelResponse;
import com.kodlamaio.invonteryServer.business.responses.get.GetAllModelsResponse;
import com.kodlamaio.invonteryServer.business.responses.get.GetModelResponse;
import com.kodlamaio.invonteryServer.business.responses.update.UpdateModelResponse;
import com.kodlamaio.invonteryServer.dataAccess.ModelRepository;
import com.kodlamaio.invonteryServer.entities.Model;

public class ModelManager implements ModelService {
	private ModelRepository modelRepository;
	private ModelMapperService modelMapperService;

	@Override
	public List<GetAllModelsResponse> getAll() {
		List<Model> model = modelRepository.findAll();
		List<GetAllModelsResponse> modelResponses = model.stream()
				.map(models -> this.modelMapperService.forResponse().map(model, GetAllModelsResponse.class))
				.collect(Collectors.toList());
		return modelResponses;
	}

	@Override
	public List<GetModelResponse> getById(String id) {
	
		return null;
	}

	@Override
	public CreateModelResponse add(CreateModelRequest createModelRequest) {
		Model model = this.modelMapperService.forRequest().map(createModelRequest, Model.class);
		model.setId(UUID.randomUUID().toString());
		modelRepository.save(model);

		CreateModelResponse createModelResponse = this.modelMapperService.forResponse().map(model,
				CreateModelResponse.class);
		return createModelResponse;
	}

	@Override
	public UpdateModelResponse update(UpdateModelRequest updateModelRequest) {
		Model model = this.modelMapperService.forRequest().map(updateModelRequest, Model.class);
		modelRepository.save(model);

		UpdateModelResponse modelResponse = this.modelMapperService.forResponse().map(model, UpdateModelResponse.class);
		return modelResponse;
	}

	@Override
	public void delete(String id) {
		modelRepository.deleteById(id);
	}

//	public void checkIfModelExistFindById(String id) {
//		Model model=this.modelRepository.findById(id);
//		if (currentBrand != null) {
//			throw new BusinessException("BRAND.EXISTS");
//		}
//		
//	}

}
